# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

[[ -f "$HOME/.sh_env" ]] && . "$HOME/.sh_env"

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
export CLICOLOR=1
export LSCOLORS=GxFxCxDxBxegedabagaced
#-------------------------------------#
#--------------Functions--------------#
#-------------------------------------#

function up() {
    for n in $(seq 1 $1); do dots+="../"; done
    cd $dots
    n=""
    dots=""
}

#-------------------------------------#
#----------------Colors---------------#
#-------------------------------------#

# 0=normal, 1=bold/light, 2=dim, 4=underlined,
# 5=blinking, 7=reversed, 8=hidden text

C0="\[\033[0;30m\]"		#Black	= 0
C1="\[\033[0;31m\]"		#Red	= 1
C2="\[\033[0;32m\]"		#Green	= 2
C3="\[\033[0;33m\]"		#Yellow	= 3
C4="\[\033[1;34m\]"		#Blue	= 4
C5="\[\033[0;35m\]"		#Purple	= 5
C6="\[\033[0;36m\]"		#Cyan	= 6
C7="\[\033[0;37m\]"		#White	= 7
C8="\[\033[0;38m\]"		#		= 8
C9="\[\033[0;39m\]"		#		= 9

P="\[\033[0m\]"			#Reset

#-------------------------------------#
#---------------Bash Boi--------------#
#-------------------------------------#

HAPPY="${C2}^_^${P}"
ANGRY="${C1}>_<${P}"
SELECT="if [ \$? = 0 ]; then echo \"${HAPPY}\"; else echo \"${ANGRY}\"; fi"

#-------------------------------------#
#--------------Git Branch-------------#
#-------------------------------------#

GIT="git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/' "

#-------------------------------------#
#----------------Prompt---------------#
#-------------------------------------#

#Primary
PS1="\n $C3\u$P$C1@$P$C3\h$P \`${SELECT}\`$C6\`${GIT}\`$P \n $C2\w$P\n$C4-->$P " 

# Secondary
PS2="$C3--->$P "

if type zoxide &> /dev/null
then
  eval "$(zoxide init bash)"
  alias cd="z"
fi


